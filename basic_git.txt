!!WARNING!! DONT INIT A REPO INSIDE OF A REPO:
	-Before running git init, use git status to verify that you're not currently inside of a repo.
	-Prefer using 1 repo per project

[Working Directory] -> "git add" -> [Staging Area] -> "git commit" -> [Repository(updating to .git folder in repo)]

check git version:
	git --version

config global:
	git config -global user.name "your_name"
	git config -global user.email "your_valid_email"

create git repo:
	git init

check git files status(but need to initialize repo first):
	git status

adding specific file(s) to git (moving to staging area):
	git add file1 file2 ..

adding all(s) files to git at once (moving to staging area):
	git add .

to unstage git file:
	git rm --cached <file>

to unstage git modified file:
	git restore --staged <file>

retrieve git information:
	git log

to commit changes from staging area(summarizes the changes and work snapshotted in the commit):
	git commit -m "your_message_should_have_meaning"

view git log in one line:
	git log --oneline

made a commit and then realized you forgot to include a file! Or maybe a typo in commit message.
	git commit --amend (work for current commit not the previous one)

ignore file from been tracked (like credentials / keys / etc secret).
	option 1: using website help -> https://www.toptal.com/developers/gitignore/
	option 2: create .gitignore
				-add desired filename. Ex: node_modules/

What is HEAD?
	-HEAD is our current location that we are viewing or that we're checking out.
	-It's a reference to a branch pointer and a branch pointer is where a branch currently is.

view current list on working branch (*is active branch):
	git branch

creating branch
	git branch <branch-name>

rename branch 
	git branch -m <new-branch-name>

switching between branches 
	git switch <desired-branch-name>


*** BEST GIT PRACTICE ***

1) Atomic Commits
	-Try to keep each commit focused on a single thing (when got two or more changes in repo).
	-Because much easier to undo or rollback changes later on.
	-Make code or project easier to review with "git log"

2) Present-Tense Imperactive Style ? <commit messages>
	-https://medium.com/@corrodedlotus/which-tense-should-be-used-on-a-git-commit-message-121cb641134b

